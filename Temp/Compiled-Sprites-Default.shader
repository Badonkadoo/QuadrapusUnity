// Compiled shader for PC, Mac & Linux Standalone

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
// Skipping shader variants that would not be included into build of current scene.

Shader "Sprites/Default" {
Properties {
[PerRendererData]  _MainTex ("Sprite Texture", 2D) = "white" { }
 _Color ("Tint", Color) = (1.000000,1.000000,1.000000,1.000000)
[MaterialToggle]  PixelSnap ("Pixel snap", Float) = 0.000000
}
SubShader { 
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" "CanUseSpriteAtlas"="true" "PreviewType"="Plane" }


 // Stats for Vertex shader:
 //         d3d9: 16 avg math (9..23)
 //        d3d11: 8 avg math (5..11)
 //     d3d11_9x: 8 avg math (5..11)
 // Stats for Fragment shader:
 //         d3d9: 3 avg math (3..4), 1 avg texture (1..2)
 //        d3d11: 2 math, 1 avg texture (1..2)
 //     d3d11_9x: 2 math, 1 avg texture (1..2)
 Pass {
  Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" "CanUseSpriteAtlas"="true" "PreviewType"="Plane" }
  ZWrite Off
  Cull Off
  Blend One OneMinusSrcAlpha
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
No keywords set in this variant.
-- Vertex shader for "d3d9":
// Stats: 9 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"

Matrix4x4 glstate_matrix_mvp at 0
Vector4 _Color at 4

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   row_major float4x4 glstate_matrix_mvp;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   glstate_matrix_mvp c0       4
//   _Color             c4       1
//

    vs_2_0
    def c5, 1, 0, 0, 0
    dcl_position v0
    dcl_color v1
    dcl_texcoord v2
    mad r0, v0.xyzx, c5.xxxy, c5.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    mul oD0, v1, c4
    mov oT0.xy, v2
    mad oPos.xy, r1.w, c255, r1
    mov oPos.zw, r1

// approximately 9 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 3 math, 1 textures
Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   sampler2D _MainTex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   _MainTex     s0       1
//

    ps_2_0
    dcl v0
    dcl t0.xy
    dcl_2d s0
    texld_pp r0, t0, s0
    mul_pp r0, r0, v0
    mul_pp r0.xyz, r0.w, r0
    mov_pp oC0, r0

// approximately 4 instruction slots used (1 texture, 3 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 5 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (48 bytes) on slot 0 {
  Vector4 _Color at 32
}
Constant Buffer "UnityPerDraw" (352 bytes) on slot 1 {
  Matrix4x4 glstate_matrix_mvp at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
      vs_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_constantbuffer CB1[4], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xyzw
      dcl_input v2.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_temps 1
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add o0.xyzw, r0.xyzw, cb1[3].xyzw
   4: mul o1.xyzw, v1.xyzw, cb0[2].xyzw
   5: mov o2.xy, v2.xyxx
   6: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 2 math, 1 textures
Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyzw, r0.xyzw, v1.xyzw
   2: mul o0.xyz, r0.wwww, r0.xyzx
   3: mov o0.w, r0.w
   4: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "d3d11_9x":
// Stats: 5 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (48 bytes) on slot 0 {
  Vector4 _Color at 32
}
Constant Buffer "UnityPerDraw" (352 bytes) on slot 1 {
  Matrix4x4 glstate_matrix_mvp at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             2         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             0         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_0
          dcl_texcoord v0
          dcl_texcoord1 v1
          dcl_texcoord2 v2
   0:     mul oT0, v1, c1
   1:     mul r0, v0.y, c3
   2:     mad r0, c2, v0.x, r0
   3:     mad r0, c4, v0.z, r0
   4:     add r0, r0, c5
   5:     mad oPos.xy, r0.w, c0, r0
   6:     mov oPos.zw, r0
   7:     mov oT1.xy, v2

// approximately 8 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_constantbuffer CB1[4], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xyzw
      dcl_input v2.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_temps 1
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add o0.xyzw, r0.xyzw, cb1[3].xyzw
   4: mul o1.xyzw, v1.xyzw, cb0[2].xyzw
   5: mov o2.xy, v2.xyxx
   6: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 2 math, 1 textures
Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_0
          dcl_pp t0
          dcl t1.xy
          dcl_2d s0
   0:     texld_pp r0, t1, s0
   0:     mul_pp r0, r0, t0
   1:     mul_pp r0.xyz, r0.w, r0
   2:     mov_pp oC0, r0

// approximately 4 instruction slots used (1 texture, 3 arithmetic)
      ps_4_0
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyzw, r0.xyzw, v1.xyzw
   2: mul o0.xyz, r0.wwww, r0.xyzx
   3: mov o0.w, r0.w
   4: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Keywords set in this variant: ETC1_EXTERNAL_ALPHA 
-- Vertex shader for "d3d9":
// Stats: 9 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"

Matrix4x4 glstate_matrix_mvp at 0
Vector4 _Color at 4

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   row_major float4x4 glstate_matrix_mvp;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   glstate_matrix_mvp c0       4
//   _Color             c4       1
//

    vs_2_0
    def c5, 1, 0, 0, 0
    dcl_position v0
    dcl_color v1
    dcl_texcoord v2
    mad r0, v0.xyzx, c5.xxxy, c5.yyyx
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r1.z, c2, r0
    dp4 r1.w, c3, r0
    mul oD0, v1, c4
    mov oT0.xy, v2
    mad oPos.xy, r1.w, c255, r1
    mov oPos.zw, r1

// approximately 9 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 4 math, 2 textures
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_AlphaTex" to slot 1

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   sampler2D _AlphaTex;
//   sampler2D _MainTex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   _MainTex     s0       1
//   _AlphaTex    s1       1
//

    ps_2_0
    dcl v0
    dcl t0.xy
    dcl_2d s0
    dcl_2d s1
    texld_pp r0, t0, s0
    texld_pp r1, t0, s1
    mov_pp r0.w, r1.x
    mul_pp r0, r0, v0
    mul_pp r0.xyz, r0.w, r0
    mov_pp oC0, r0

// approximately 6 instruction slots used (2 texture, 4 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 5 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (48 bytes) on slot 0 {
  Vector4 _Color at 32
}
Constant Buffer "UnityPerDraw" (352 bytes) on slot 1 {
  Matrix4x4 glstate_matrix_mvp at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
      vs_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_constantbuffer CB1[4], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xyzw
      dcl_input v2.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_temps 1
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add o0.xyzw, r0.xyzw, cb1[3].xyzw
   4: mul o1.xyzw, v1.xyzw, cb0[2].xyzw
   5: mov o2.xy, v2.xyxx
   6: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 2 math, 2 textures
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_AlphaTex" to slot 1

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 2
   0: sample r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: sample r1.xyzw, v2.xyxx, t1.xyzw, s1
   2: mov r0.w, r1.x
   3: mul r0.xyzw, r0.xyzw, v1.xyzw
   4: mul o0.xyz, r0.wwww, r0.xyzx
   5: mov o0.w, r0.w
   6: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "d3d11_9x":
// Stats: 5 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (48 bytes) on slot 0 {
  Vector4 _Color at 32
}
Constant Buffer "UnityPerDraw" (352 bytes) on slot 1 {
  Matrix4x4 glstate_matrix_mvp at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             2         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             0         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_0
          dcl_texcoord v0
          dcl_texcoord1 v1
          dcl_texcoord2 v2
   0:     mul oT0, v1, c1
   1:     mul r0, v0.y, c3
   2:     mad r0, c2, v0.x, r0
   3:     mad r0, c4, v0.z, r0
   4:     add r0, r0, c5
   5:     mad oPos.xy, r0.w, c0, r0
   6:     mov oPos.zw, r0
   7:     mov oT1.xy, v2

// approximately 8 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_constantbuffer CB1[4], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xyzw
      dcl_input v2.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_temps 1
   0: mul r0.xyzw, v0.yyyy, cb1[1].xyzw
   1: mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
   3: add o0.xyzw, r0.xyzw, cb1[3].xyzw
   4: mul o1.xyzw, v1.xyzw, cb0[2].xyzw
   5: mov o2.xy, v2.xyxx
   6: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 2 math, 2 textures
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_AlphaTex" to slot 1

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
// s1             s1              t1               
//
//
// Level9 shader bytecode:
//
    ps_2_0
          dcl_pp t0
          dcl t1.xy
          dcl_2d s0
          dcl_2d s1
   0:     texld_pp r0, t1, s0
   0:     texld_pp r1, t1, s1
   0:     mov_pp r0.w, r1.x
   1:     mul_pp r0, r0, t0
   2:     mul_pp r0.xyz, r0.w, r0
   3:     mov_pp oC0, r0

// approximately 6 instruction slots used (2 texture, 4 arithmetic)
      ps_4_0
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 2
   0: sample r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: sample r1.xyzw, v2.xyxx, t1.xyzw, s1
   2: mov r0.w, r1.x
   3: mul r0.xyzw, r0.xyzw, v1.xyzw
   4: mul o0.xyz, r0.wwww, r0.xyzx
   5: mov o0.w, r0.w
   6: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Keywords set in this variant: PIXELSNAP_ON 
-- Vertex shader for "d3d9":
// Stats: 23 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"

Matrix4x4 glstate_matrix_mvp at 0
Vector4 _Color at 5
Vector4 _ScreenParams at 4

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   float4 _ScreenParams;
//   row_major float4x4 glstate_matrix_mvp;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   glstate_matrix_mvp c0       4
//   _ScreenParams      c4       1
//   _Color             c5       1
//

    vs_2_0
    def c6, 1, 0, 0.5, 0
    dcl_position v0
    dcl_color v1
    dcl_texcoord v2
    mad r0, v0.xyzx, c6.xxxy, c6.yyyx
    dp4 r3.z, c2, r0
    mul oD0, v1, c5
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r0.x, c3, r0
    rcp r0.y, r0.x
    mul r0.yz, r0.y, r1.xxyw
    mov r1.z, c6.z
    mul r1.xy, r1.z, c4
    mad r0.yz, r0, r1.xxyw, c6.z
    frc r1.zw, r0.xyyz
    add r0.yz, r0, -r1.xzww
    rcp r2.x, r1.x
    rcp r2.y, r1.y
    mul r0.yz, r0, r2.xxyw
    mul r3.xy, r0.x, r0.yzzw
    mov r3.w, r0.x
    mov oT0.xy, v2
    mad oPos.xy, r3.w, c255, r3
    mov oPos.zw, r3

// approximately 21 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 3 math, 1 textures
Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   sampler2D _MainTex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   _MainTex     s0       1
//

    ps_2_0
    dcl v0
    dcl t0.xy
    dcl_2d s0
    texld_pp r0, t0, s0
    mul_pp r0, r0, v0
    mul_pp r0.xyz, r0.w, r0
    mov_pp oC0, r0

// approximately 4 instruction slots used (1 texture, 3 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 11 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (48 bytes) on slot 0 {
  Vector4 _Color at 32
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ScreenParams at 96
}
Constant Buffer "UnityPerDraw" (352 bytes) on slot 2 {
  Matrix4x4 glstate_matrix_mvp at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
      vs_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[4], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xyzw
      dcl_input v2.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r0.xyzw, r0.xyzw, cb2[3].xyzw
   4: div r0.xy, r0.xyxx, r0.wwww
   5: mul r1.xy, cb1[6].xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
   6: mul r0.xy, r0.xyxx, r1.xyxx
   7: round_ne r0.xy, r0.xyxx
   8: div r0.xy, r0.xyxx, r1.xyxx
   9: mul o0.xy, r0.wwww, r0.xyxx
  10: mov o0.zw, r0.zzzw
  11: mul o1.xyzw, v1.xyzw, cb0[2].xyzw
  12: mov o2.xy, v2.xyxx
  13: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 2 math, 1 textures
Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyzw, r0.xyzw, v1.xyzw
   2: mul o0.xyz, r0.wwww, r0.xyzx
   3: mov o0.w, r0.w
   4: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "d3d11_9x":
// Stats: 11 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (48 bytes) on slot 0 {
  Vector4 _Color at 32
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ScreenParams at 96
}
Constant Buffer "UnityPerDraw" (352 bytes) on slot 2 {
  Matrix4x4 glstate_matrix_mvp at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             2         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             6         1  ( FLT, FLT, FLT, FLT)
// c3         cb2             0         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_0
          def c7, 0.5, 0, 0, 0
          dcl_texcoord v0
          dcl_texcoord1 v1
          dcl_texcoord2 v2
   0:     mul oT0, v1, c1
   1:     mul r0, v0.y, c4
   2:     mad r0, c3, v0.x, r0
   3:     mad r0, c5, v0.z, r0
   4:     add r0, r0, c6
   5:     rcp r1.x, r0.w
   6:     mul r0.xy, r0, r1.x
   7:     mov r1.x, c7.x
   8:     mul r1.xy, r1.x, c2
   9:     mad r0.xy, r0, r1, c7.x
  10:     frc r1.zw, r0.xyxy
  11:     add r0.xy, r0, -r1.zwzw
  12:     rcp r2.x, r1.x
  13:     rcp r2.y, r1.y
  14:     mul r0.xy, r0, r2
  15:     mul r1.xy, r0.w, c0
  16:     mad oPos.xy, r0, r0.w, r1
  17:     mov oPos.zw, r0
  18:     mov oT1.xy, v2

// approximately 19 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[4], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xyzw
      dcl_input v2.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r0.xyzw, r0.xyzw, cb2[3].xyzw
   4: div r0.xy, r0.xyxx, r0.wwww
   5: mul r1.xy, cb1[6].xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
   6: mul r0.xy, r0.xyxx, r1.xyxx
   7: round_ne r0.xy, r0.xyxx
   8: div r0.xy, r0.xyxx, r1.xyxx
   9: mul o0.xy, r0.wwww, r0.xyxx
  10: mov o0.zw, r0.zzzw
  11: mul o1.xyzw, v1.xyzw, cb0[2].xyzw
  12: mov o2.xy, v2.xyxx
  13: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 2 math, 1 textures
Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_0
          dcl_pp t0
          dcl t1.xy
          dcl_2d s0
   0:     texld_pp r0, t1, s0
   0:     mul_pp r0, r0, t0
   1:     mul_pp r0.xyz, r0.w, r0
   2:     mov_pp oC0, r0

// approximately 4 instruction slots used (1 texture, 3 arithmetic)
      ps_4_0
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: mul r0.xyzw, r0.xyzw, v1.xyzw
   2: mul o0.xyz, r0.wwww, r0.xyzx
   3: mov o0.w, r0.w
   4: ret 
// Approximately 0 instruction slots used


//////////////////////////////////////////////////////
Keywords set in this variant: ETC1_EXTERNAL_ALPHA PIXELSNAP_ON 
-- Vertex shader for "d3d9":
// Stats: 23 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"

Matrix4x4 glstate_matrix_mvp at 0
Vector4 _Color at 5
Vector4 _ScreenParams at 4

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   float4 _ScreenParams;
//   row_major float4x4 glstate_matrix_mvp;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   glstate_matrix_mvp c0       4
//   _ScreenParams      c4       1
//   _Color             c5       1
//

    vs_2_0
    def c6, 1, 0, 0.5, 0
    dcl_position v0
    dcl_color v1
    dcl_texcoord v2
    mad r0, v0.xyzx, c6.xxxy, c6.yyyx
    dp4 r3.z, c2, r0
    mul oD0, v1, c5
    dp4 r1.x, c0, r0
    dp4 r1.y, c1, r0
    dp4 r0.x, c3, r0
    rcp r0.y, r0.x
    mul r0.yz, r0.y, r1.xxyw
    mov r1.z, c6.z
    mul r1.xy, r1.z, c4
    mad r0.yz, r0, r1.xxyw, c6.z
    frc r1.zw, r0.xyyz
    add r0.yz, r0, -r1.xzww
    rcp r2.x, r1.x
    rcp r2.y, r1.y
    mul r0.yz, r0, r2.xxyw
    mul r3.xy, r0.x, r0.yzzw
    mov r3.w, r0.x
    mov oT0.xy, v2
    mad oPos.xy, r3.w, c255, r3
    mov oPos.zw, r3

// approximately 21 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 4 math, 2 textures
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_AlphaTex" to slot 1

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   sampler2D _AlphaTex;
//   sampler2D _MainTex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   _MainTex     s0       1
//   _AlphaTex    s1       1
//

    ps_2_0
    dcl v0
    dcl t0.xy
    dcl_2d s0
    dcl_2d s1
    texld_pp r0, t0, s0
    texld_pp r1, t0, s1
    mov_pp r0.w, r1.x
    mul_pp r0, r0, v0
    mul_pp r0.xyz, r0.w, r0
    mov_pp oC0, r0

// approximately 6 instruction slots used (2 texture, 4 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 11 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (48 bytes) on slot 0 {
  Vector4 _Color at 32
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ScreenParams at 96
}
Constant Buffer "UnityPerDraw" (352 bytes) on slot 2 {
  Matrix4x4 glstate_matrix_mvp at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
      vs_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[4], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xyzw
      dcl_input v2.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r0.xyzw, r0.xyzw, cb2[3].xyzw
   4: div r0.xy, r0.xyxx, r0.wwww
   5: mul r1.xy, cb1[6].xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
   6: mul r0.xy, r0.xyxx, r1.xyxx
   7: round_ne r0.xy, r0.xyxx
   8: div r0.xy, r0.xyxx, r1.xyxx
   9: mul o0.xy, r0.wwww, r0.xyxx
  10: mov o0.zw, r0.zzzw
  11: mul o1.xyzw, v1.xyzw, cb0[2].xyzw
  12: mov o2.xy, v2.xyxx
  13: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 2 math, 2 textures
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_AlphaTex" to slot 1

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 2
   0: sample r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: sample r1.xyzw, v2.xyxx, t1.xyzw, s1
   2: mov r0.w, r1.x
   3: mul r0.xyzw, r0.xyzw, v1.xyzw
   4: mul o0.xyz, r0.wwww, r0.xyzx
   5: mov o0.w, r0.w
   6: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "d3d11_9x":
// Stats: 11 math
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (48 bytes) on slot 0 {
  Vector4 _Color at 32
}
Constant Buffer "UnityPerCamera" (144 bytes) on slot 1 {
  Vector4 _ScreenParams at 96
}
Constant Buffer "UnityPerDraw" (352 bytes) on slot 2 {
  Matrix4x4 glstate_matrix_mvp at 0
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             2         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             6         1  ( FLT, FLT, FLT, FLT)
// c3         cb2             0         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_0
          def c7, 0.5, 0, 0, 0
          dcl_texcoord v0
          dcl_texcoord1 v1
          dcl_texcoord2 v2
   0:     mul oT0, v1, c1
   1:     mul r0, v0.y, c4
   2:     mad r0, c3, v0.x, r0
   3:     mad r0, c5, v0.z, r0
   4:     add r0, r0, c6
   5:     rcp r1.x, r0.w
   6:     mul r0.xy, r0, r1.x
   7:     mov r1.x, c7.x
   8:     mul r1.xy, r1.x, c2
   9:     mad r0.xy, r0, r1, c7.x
  10:     frc r1.zw, r0.xyxy
  11:     add r0.xy, r0, -r1.zwzw
  12:     rcp r2.x, r1.x
  13:     rcp r2.y, r1.y
  14:     mul r0.xy, r0, r2
  15:     mul r1.xy, r0.w, c0
  16:     mad oPos.xy, r0, r0.w, r1
  17:     mov oPos.zw, r0
  18:     mov oT1.xy, v2

// approximately 19 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_constantbuffer CB1[7], immediateIndexed
      dcl_constantbuffer CB2[4], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xyzw
      dcl_input v2.xy
      dcl_output_siv o0.xyzw, position
      dcl_output o1.xyzw
      dcl_output o2.xy
      dcl_temps 2
   0: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
   1: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
   2: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
   3: add r0.xyzw, r0.xyzw, cb2[3].xyzw
   4: div r0.xy, r0.xyxx, r0.wwww
   5: mul r1.xy, cb1[6].xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
   6: mul r0.xy, r0.xyxx, r1.xyxx
   7: round_ne r0.xy, r0.xyxx
   8: div r0.xy, r0.xyxx, r1.xyxx
   9: mul o0.xy, r0.wwww, r0.xyxx
  10: mov o0.zw, r0.zzzw
  11: mul o1.xyzw, v1.xyzw, cb0[2].xyzw
  12: mov o2.xy, v2.xyxx
  13: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 2 math, 2 textures
Set 2D Texture "_MainTex" to slot 0
Set 2D Texture "_AlphaTex" to slot 1

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
// s1             s1              t1               
//
//
// Level9 shader bytecode:
//
    ps_2_0
          dcl_pp t0
          dcl t1.xy
          dcl_2d s0
          dcl_2d s1
   0:     texld_pp r0, t1, s0
   0:     texld_pp r1, t1, s1
   0:     mov_pp r0.w, r1.x
   1:     mul_pp r0, r0, t0
   2:     mul_pp r0.xyz, r0.w, r0
   3:     mov_pp oC0, r0

// approximately 6 instruction slots used (2 texture, 4 arithmetic)
      ps_4_0
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_resource_texture2d (float,float,float,float) t1
      dcl_input_ps linear v1.xyzw
      dcl_input_ps linear v2.xy
      dcl_output o0.xyzw
      dcl_temps 2
   0: sample r0.xyzw, v2.xyxx, t0.xyzw, s0
   1: sample r1.xyzw, v2.xyxx, t1.xyzw, s1
   2: mov r0.w, r1.x
   3: mul r0.xyzw, r0.xyzw, v1.xyzw
   4: mul o0.xyz, r0.wwww, r0.xyzx
   5: mov o0.w, r0.w
   6: ret 
// Approximately 0 instruction slots used


 }
}
}